// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/memberclass-backend-golang/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockUploadVideoBunnyCdnUseCase is an autogenerated mock type for the UploadVideoBunnyCdnUseCase type
type MockUploadVideoBunnyCdnUseCase struct {
	mock.Mock
}

type MockUploadVideoBunnyCdnUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUploadVideoBunnyCdnUseCase) EXPECT() *MockUploadVideoBunnyCdnUseCase_Expecter {
	return &MockUploadVideoBunnyCdnUseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, bunnyParams, fileBytes, title
func (_m *MockUploadVideoBunnyCdnUseCase) Execute(ctx context.Context, bunnyParams dto.BunnyParametersAccess, fileBytes []byte, title string) (*dto.UploadVideoResponse, error) {
	ret := _m.Called(ctx, bunnyParams, fileBytes, title)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *dto.UploadVideoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BunnyParametersAccess, []byte, string) (*dto.UploadVideoResponse, error)); ok {
		return rf(ctx, bunnyParams, fileBytes, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BunnyParametersAccess, []byte, string) *dto.UploadVideoResponse); ok {
		r0 = rf(ctx, bunnyParams, fileBytes, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UploadVideoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BunnyParametersAccess, []byte, string) error); ok {
		r1 = rf(ctx, bunnyParams, fileBytes, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUploadVideoBunnyCdnUseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUploadVideoBunnyCdnUseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - bunnyParams dto.BunnyParametersAccess
//   - fileBytes []byte
//   - title string
func (_e *MockUploadVideoBunnyCdnUseCase_Expecter) Execute(ctx interface{}, bunnyParams interface{}, fileBytes interface{}, title interface{}) *MockUploadVideoBunnyCdnUseCase_Execute_Call {
	return &MockUploadVideoBunnyCdnUseCase_Execute_Call{Call: _e.mock.On("Execute", ctx, bunnyParams, fileBytes, title)}
}

func (_c *MockUploadVideoBunnyCdnUseCase_Execute_Call) Run(run func(ctx context.Context, bunnyParams dto.BunnyParametersAccess, fileBytes []byte, title string)) *MockUploadVideoBunnyCdnUseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.BunnyParametersAccess), args[2].([]byte), args[3].(string))
	})
	return _c
}

func (_c *MockUploadVideoBunnyCdnUseCase_Execute_Call) Return(_a0 *dto.UploadVideoResponse, _a1 error) *MockUploadVideoBunnyCdnUseCase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUploadVideoBunnyCdnUseCase_Execute_Call) RunAndReturn(run func(context.Context, dto.BunnyParametersAccess, []byte, string) (*dto.UploadVideoResponse, error)) *MockUploadVideoBunnyCdnUseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUploadVideoBunnyCdnUseCase creates a new instance of MockUploadVideoBunnyCdnUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUploadVideoBunnyCdnUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUploadVideoBunnyCdnUseCase {
	mock := &MockUploadVideoBunnyCdnUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
