// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/memberclass-backend-golang/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockRateLimiterUpload is an autogenerated mock type for the RateLimiterUpload type
type MockRateLimiterUpload struct {
	mock.Mock
}

type MockRateLimiterUpload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimiterUpload) EXPECT() *MockRateLimiterUpload_Expecter {
	return &MockRateLimiterUpload_Expecter{mock: &_m.Mock}
}

// CheckUploadLimit provides a mock function with given fields: ctx, key, fileSize
func (_m *MockRateLimiterUpload) CheckUploadLimit(ctx context.Context, key string, fileSize int64) (dto.RateLimitResponseDTO, error) {
	ret := _m.Called(ctx, key, fileSize)

	if len(ret) == 0 {
		panic("no return value specified for CheckUploadLimit")
	}

	var r0 dto.RateLimitResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (dto.RateLimitResponseDTO, error)); ok {
		return rf(ctx, key, fileSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) dto.RateLimitResponseDTO); ok {
		r0 = rf(ctx, key, fileSize)
	} else {
		r0 = ret.Get(0).(dto.RateLimitResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, key, fileSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiterUpload_CheckUploadLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUploadLimit'
type MockRateLimiterUpload_CheckUploadLimit_Call struct {
	*mock.Call
}

// CheckUploadLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fileSize int64
func (_e *MockRateLimiterUpload_Expecter) CheckUploadLimit(ctx interface{}, key interface{}, fileSize interface{}) *MockRateLimiterUpload_CheckUploadLimit_Call {
	return &MockRateLimiterUpload_CheckUploadLimit_Call{Call: _e.mock.On("CheckUploadLimit", ctx, key, fileSize)}
}

func (_c *MockRateLimiterUpload_CheckUploadLimit_Call) Run(run func(ctx context.Context, key string, fileSize int64)) *MockRateLimiterUpload_CheckUploadLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockRateLimiterUpload_CheckUploadLimit_Call) Return(_a0 dto.RateLimitResponseDTO, _a1 error) *MockRateLimiterUpload_CheckUploadLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiterUpload_CheckUploadLimit_Call) RunAndReturn(run func(context.Context, string, int64) (dto.RateLimitResponseDTO, error)) *MockRateLimiterUpload_CheckUploadLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUploadSize provides a mock function with given fields: ctx, key
func (_m *MockRateLimiterUpload) GetCurrentUploadSize(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUploadSize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiterUpload_GetCurrentUploadSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUploadSize'
type MockRateLimiterUpload_GetCurrentUploadSize_Call struct {
	*mock.Call
}

// GetCurrentUploadSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRateLimiterUpload_Expecter) GetCurrentUploadSize(ctx interface{}, key interface{}) *MockRateLimiterUpload_GetCurrentUploadSize_Call {
	return &MockRateLimiterUpload_GetCurrentUploadSize_Call{Call: _e.mock.On("GetCurrentUploadSize", ctx, key)}
}

func (_c *MockRateLimiterUpload_GetCurrentUploadSize_Call) Run(run func(ctx context.Context, key string)) *MockRateLimiterUpload_GetCurrentUploadSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRateLimiterUpload_GetCurrentUploadSize_Call) Return(_a0 int64, _a1 error) *MockRateLimiterUpload_GetCurrentUploadSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiterUpload_GetCurrentUploadSize_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockRateLimiterUpload_GetCurrentUploadSize_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementUploadSize provides a mock function with given fields: ctx, key, fileSize
func (_m *MockRateLimiterUpload) IncrementUploadSize(ctx context.Context, key string, fileSize int64) error {
	ret := _m.Called(ctx, key, fileSize)

	if len(ret) == 0 {
		panic("no return value specified for IncrementUploadSize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, key, fileSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRateLimiterUpload_IncrementUploadSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementUploadSize'
type MockRateLimiterUpload_IncrementUploadSize_Call struct {
	*mock.Call
}

// IncrementUploadSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fileSize int64
func (_e *MockRateLimiterUpload_Expecter) IncrementUploadSize(ctx interface{}, key interface{}, fileSize interface{}) *MockRateLimiterUpload_IncrementUploadSize_Call {
	return &MockRateLimiterUpload_IncrementUploadSize_Call{Call: _e.mock.On("IncrementUploadSize", ctx, key, fileSize)}
}

func (_c *MockRateLimiterUpload_IncrementUploadSize_Call) Run(run func(ctx context.Context, key string, fileSize int64)) *MockRateLimiterUpload_IncrementUploadSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockRateLimiterUpload_IncrementUploadSize_Call) Return(_a0 error) *MockRateLimiterUpload_IncrementUploadSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRateLimiterUpload_IncrementUploadSize_Call) RunAndReturn(run func(context.Context, string, int64) error) *MockRateLimiterUpload_IncrementUploadSize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRateLimiterUpload creates a new instance of MockRateLimiterUpload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiterUpload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiterUpload {
	mock := &MockRateLimiterUpload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
