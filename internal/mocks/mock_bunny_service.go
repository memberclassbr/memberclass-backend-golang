// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/memberclass-backend-golang/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockBunnyService is an autogenerated mock type for the BunnyService type
type MockBunnyService struct {
	mock.Mock
}

type MockBunnyService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBunnyService) EXPECT() *MockBunnyService_Expecter {
	return &MockBunnyService_Expecter{mock: &_m.Mock}
}

// CreateCollection provides a mock function with given fields: ctx, createCollectionRequest, bunnyParametersAccess
func (_m *MockBunnyService) CreateCollection(ctx context.Context, createCollectionRequest dto.CreateCollectionRequest, bunnyParametersAccess dto.BunnyParametersAccess) (*dto.CreateCollectionResponse, error) {
	ret := _m.Called(ctx, createCollectionRequest, bunnyParametersAccess)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 *dto.CreateCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateCollectionRequest, dto.BunnyParametersAccess) (*dto.CreateCollectionResponse, error)); ok {
		return rf(ctx, createCollectionRequest, bunnyParametersAccess)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateCollectionRequest, dto.BunnyParametersAccess) *dto.CreateCollectionResponse); ok {
		r0 = rf(ctx, createCollectionRequest, bunnyParametersAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateCollectionRequest, dto.BunnyParametersAccess) error); ok {
		r1 = rf(ctx, createCollectionRequest, bunnyParametersAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBunnyService_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockBunnyService_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - createCollectionRequest dto.CreateCollectionRequest
//   - bunnyParametersAccess dto.BunnyParametersAccess
func (_e *MockBunnyService_Expecter) CreateCollection(ctx interface{}, createCollectionRequest interface{}, bunnyParametersAccess interface{}) *MockBunnyService_CreateCollection_Call {
	return &MockBunnyService_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, createCollectionRequest, bunnyParametersAccess)}
}

func (_c *MockBunnyService_CreateCollection_Call) Run(run func(ctx context.Context, createCollectionRequest dto.CreateCollectionRequest, bunnyParametersAccess dto.BunnyParametersAccess)) *MockBunnyService_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateCollectionRequest), args[2].(dto.BunnyParametersAccess))
	})
	return _c
}

func (_c *MockBunnyService_CreateCollection_Call) Return(_a0 *dto.CreateCollectionResponse, _a1 error) *MockBunnyService_CreateCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBunnyService_CreateCollection_Call) RunAndReturn(run func(context.Context, dto.CreateCollectionRequest, dto.BunnyParametersAccess) (*dto.CreateCollectionResponse, error)) *MockBunnyService_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVideo provides a mock function with given fields: ctx, video, bunnyParametersAccess
func (_m *MockBunnyService) CreateVideo(ctx context.Context, video dto.CreateVideoRequest, bunnyParametersAccess dto.BunnyParametersAccess) (*dto.CreateVideoResponse, error) {
	ret := _m.Called(ctx, video, bunnyParametersAccess)

	if len(ret) == 0 {
		panic("no return value specified for CreateVideo")
	}

	var r0 *dto.CreateVideoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateVideoRequest, dto.BunnyParametersAccess) (*dto.CreateVideoResponse, error)); ok {
		return rf(ctx, video, bunnyParametersAccess)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateVideoRequest, dto.BunnyParametersAccess) *dto.CreateVideoResponse); ok {
		r0 = rf(ctx, video, bunnyParametersAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateVideoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateVideoRequest, dto.BunnyParametersAccess) error); ok {
		r1 = rf(ctx, video, bunnyParametersAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBunnyService_CreateVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVideo'
type MockBunnyService_CreateVideo_Call struct {
	*mock.Call
}

// CreateVideo is a helper method to define mock.On call
//   - ctx context.Context
//   - video dto.CreateVideoRequest
//   - bunnyParametersAccess dto.BunnyParametersAccess
func (_e *MockBunnyService_Expecter) CreateVideo(ctx interface{}, video interface{}, bunnyParametersAccess interface{}) *MockBunnyService_CreateVideo_Call {
	return &MockBunnyService_CreateVideo_Call{Call: _e.mock.On("CreateVideo", ctx, video, bunnyParametersAccess)}
}

func (_c *MockBunnyService_CreateVideo_Call) Run(run func(ctx context.Context, video dto.CreateVideoRequest, bunnyParametersAccess dto.BunnyParametersAccess)) *MockBunnyService_CreateVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateVideoRequest), args[2].(dto.BunnyParametersAccess))
	})
	return _c
}

func (_c *MockBunnyService_CreateVideo_Call) Return(_a0 *dto.CreateVideoResponse, _a1 error) *MockBunnyService_CreateVideo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBunnyService_CreateVideo_Call) RunAndReturn(run func(context.Context, dto.CreateVideoRequest, dto.BunnyParametersAccess) (*dto.CreateVideoResponse, error)) *MockBunnyService_CreateVideo_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollections provides a mock function with given fields: ctx, bunnyParametersAccess
func (_m *MockBunnyService) GetCollections(ctx context.Context, bunnyParametersAccess dto.BunnyParametersAccess) (*dto.BunnyCollectionsResponse, error) {
	ret := _m.Called(ctx, bunnyParametersAccess)

	if len(ret) == 0 {
		panic("no return value specified for GetCollections")
	}

	var r0 *dto.BunnyCollectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BunnyParametersAccess) (*dto.BunnyCollectionsResponse, error)); ok {
		return rf(ctx, bunnyParametersAccess)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BunnyParametersAccess) *dto.BunnyCollectionsResponse); ok {
		r0 = rf(ctx, bunnyParametersAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BunnyCollectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BunnyParametersAccess) error); ok {
		r1 = rf(ctx, bunnyParametersAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBunnyService_GetCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollections'
type MockBunnyService_GetCollections_Call struct {
	*mock.Call
}

// GetCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - bunnyParametersAccess dto.BunnyParametersAccess
func (_e *MockBunnyService_Expecter) GetCollections(ctx interface{}, bunnyParametersAccess interface{}) *MockBunnyService_GetCollections_Call {
	return &MockBunnyService_GetCollections_Call{Call: _e.mock.On("GetCollections", ctx, bunnyParametersAccess)}
}

func (_c *MockBunnyService_GetCollections_Call) Run(run func(ctx context.Context, bunnyParametersAccess dto.BunnyParametersAccess)) *MockBunnyService_GetCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.BunnyParametersAccess))
	})
	return _c
}

func (_c *MockBunnyService_GetCollections_Call) Return(_a0 *dto.BunnyCollectionsResponse, _a1 error) *MockBunnyService_GetCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBunnyService_GetCollections_Call) RunAndReturn(run func(context.Context, dto.BunnyParametersAccess) (*dto.BunnyCollectionsResponse, error)) *MockBunnyService_GetCollections_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVideo provides a mock function with given fields: ctx, uploadVideoRequest, bunnyParametersAccess
func (_m *MockBunnyService) UploadVideo(ctx context.Context, uploadVideoRequest dto.UploadVideoRequest, bunnyParametersAccess dto.BunnyParametersAccess) error {
	ret := _m.Called(ctx, uploadVideoRequest, bunnyParametersAccess)

	if len(ret) == 0 {
		panic("no return value specified for UploadVideo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UploadVideoRequest, dto.BunnyParametersAccess) error); ok {
		r0 = rf(ctx, uploadVideoRequest, bunnyParametersAccess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBunnyService_UploadVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVideo'
type MockBunnyService_UploadVideo_Call struct {
	*mock.Call
}

// UploadVideo is a helper method to define mock.On call
//   - ctx context.Context
//   - uploadVideoRequest dto.UploadVideoRequest
//   - bunnyParametersAccess dto.BunnyParametersAccess
func (_e *MockBunnyService_Expecter) UploadVideo(ctx interface{}, uploadVideoRequest interface{}, bunnyParametersAccess interface{}) *MockBunnyService_UploadVideo_Call {
	return &MockBunnyService_UploadVideo_Call{Call: _e.mock.On("UploadVideo", ctx, uploadVideoRequest, bunnyParametersAccess)}
}

func (_c *MockBunnyService_UploadVideo_Call) Run(run func(ctx context.Context, uploadVideoRequest dto.UploadVideoRequest, bunnyParametersAccess dto.BunnyParametersAccess)) *MockBunnyService_UploadVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UploadVideoRequest), args[2].(dto.BunnyParametersAccess))
	})
	return _c
}

func (_c *MockBunnyService_UploadVideo_Call) Return(_a0 error) *MockBunnyService_UploadVideo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBunnyService_UploadVideo_Call) RunAndReturn(run func(context.Context, dto.UploadVideoRequest, dto.BunnyParametersAccess) error) *MockBunnyService_UploadVideo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBunnyService creates a new instance of MockBunnyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBunnyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBunnyService {
	mock := &MockBunnyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
