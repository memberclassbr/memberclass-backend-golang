// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entities "github.com/memberclass-backend-golang/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockTenantRepository is an autogenerated mock type for the TenantRepository type
type MockTenantRepository struct {
	mock.Mock
}

type MockTenantRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantRepository) EXPECT() *MockTenantRepository_Expecter {
	return &MockTenantRepository_Expecter{mock: &_m.Mock}
}

// FindBunnyInfoByID provides a mock function with given fields: tenantID
func (_m *MockTenantRepository) FindBunnyInfoByID(tenantID string) (*entities.Tenant, error) {
	ret := _m.Called(tenantID)

	if len(ret) == 0 {
		panic("no return value specified for FindBunnyInfoByID")
	}

	var r0 *entities.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Tenant, error)); ok {
		return rf(tenantID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Tenant); ok {
		r0 = rf(tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantRepository_FindBunnyInfoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBunnyInfoByID'
type MockTenantRepository_FindBunnyInfoByID_Call struct {
	*mock.Call
}

// FindBunnyInfoByID is a helper method to define mock.On call
//   - tenantID string
func (_e *MockTenantRepository_Expecter) FindBunnyInfoByID(tenantID interface{}) *MockTenantRepository_FindBunnyInfoByID_Call {
	return &MockTenantRepository_FindBunnyInfoByID_Call{Call: _e.mock.On("FindBunnyInfoByID", tenantID)}
}

func (_c *MockTenantRepository_FindBunnyInfoByID_Call) Run(run func(tenantID string)) *MockTenantRepository_FindBunnyInfoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTenantRepository_FindBunnyInfoByID_Call) Return(_a0 *entities.Tenant, _a1 error) *MockTenantRepository_FindBunnyInfoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantRepository_FindBunnyInfoByID_Call) RunAndReturn(run func(string) (*entities.Tenant, error)) *MockTenantRepository_FindBunnyInfoByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: tenantID
func (_m *MockTenantRepository) FindByID(tenantID string) (*entities.Tenant, error) {
	ret := _m.Called(tenantID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Tenant, error)); ok {
		return rf(tenantID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Tenant); ok {
		r0 = rf(tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockTenantRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - tenantID string
func (_e *MockTenantRepository_Expecter) FindByID(tenantID interface{}) *MockTenantRepository_FindByID_Call {
	return &MockTenantRepository_FindByID_Call{Call: _e.mock.On("FindByID", tenantID)}
}

func (_c *MockTenantRepository_FindByID_Call) Run(run func(tenantID string)) *MockTenantRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTenantRepository_FindByID_Call) Return(_a0 *entities.Tenant, _a1 error) *MockTenantRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantRepository_FindByID_Call) RunAndReturn(run func(string) (*entities.Tenant, error)) *MockTenantRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTenantRepository creates a new instance of MockTenantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantRepository {
	mock := &MockTenantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
